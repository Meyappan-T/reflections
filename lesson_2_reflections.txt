What happens when you initialize a repository? Why do you need to do it?

While initializing a repository, a git config folder will get created with a name .git 
Which will be used for tracking the commits and files. Auto commit won't happen.

How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area will have the files that needs to be committed. Git will keep track of the files once a commit is done.
Working directory files won't get tracked by git.

How can you use the staging area to make sure you have one commit per logical change?

using git diff -staged command, I can find the differences between the changes made with the latest commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

While adding a new feature which is just an enhancement, if that enhancement works fine, then we can merge the branch to master.

How do the diagrams help you visualize the branch structure?

pretty good.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

if two branches are working fine and merging those will give a product having both functionalities.

Commands learned in Lesson 2:

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.